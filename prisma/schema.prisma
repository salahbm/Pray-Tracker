// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

//  dotenv -e .env.local -- npx prisma migrate dev --name <n>

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters","reactNative"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id          String    @id @default(cuid())
  supabaseId     String    @unique
  email       String    @unique
  password    String    
  username    String    @unique
  firstName   String?
  lastName    String?
  photo       String?   @default("https://dtjijnfmvwmpszagdtdt.supabase.co/storage/v1/object/public/avatars//guest.png")

  totalPoints Int       @default(0)
  deviceToken String?  // Store the Expo push token
  
  prays       Prays[]
  awards      Award[]
  prayerStats PrayerStats?
  sentRequests  Friend[] @relation("user_friends")
  receivedRequests Friend[] @relation("friend_friends")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Prays {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime // Use DateTime instead of String for easier date manipulation
  fajr      Int  @default(0)
  dhuhr     Int  @default(0)
  asr       Int  @default(0)
  maghrib   Int  @default(0)
  isha      Int  @default(0)
  nafl      Int  @default(0)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date]) // Ensure no duplicate date entries for a user
}

model Award {
  id          String   @id @default(cuid())
  userId      String
  title       String   // Award name
  awardedAt   DateTime @default(now())  // Keep this for sorting
  points      Int      @default(10)     // Points awarded for achieving this award

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  sunnahPrays    SunnahPrays[]
  dhikr          Dhikr[]
  quranReading   QuranReading[]
  userCommunity  UserCommunity?

  @@unique([userId, title])
}

model PrayerStats {
  id                    String   @id @default(cuid())
  userId                String   @unique
  totalPrayers          Int      @default(0)
  currentStreak         Int      @default(0)
  longestStreak         Int      @default(0)
  daysWithAllPrayers    Int      @default(0)
  onTimePercentage      Float    @default(0)
  jamaatCount           Int      @default(0)
  sunnahPrayers         Int      @default(0)
  duhaCount            Int      @default(0)
  tahajjudCount        Int      @default(0)
  fajrOnTimePercentage Float    @default(0)
  earlyFajrPercentage  Float    @default(0)
  ramadanPrayerCount   Int      @default(0)
  ramadanPerfectDays   Int      @default(0)
  lastTenNightsPrayers Int      @default(0)
  eidPrayersCount      Int      @default(0)
  jumuahCount          Int      @default(0)
  masjidVisits         Int      @default(0)
  lastCalculated        DateTime @default(now())

  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SunnahPrays {
  id        String   @id @default(cuid())
  awardId   String
  type      String
  prayedAt  DateTime

  award     Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Dhikr {
  id        String   @id @default(cuid())
  awardId   String
  type      String
  count     Int
  createdAt DateTime @default(now())

  award     Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
}

model QuranReading {
  id        String   @id @default(cuid())
  awardId   String
  duration  Int
  createdAt DateTime @default(now())

  award     Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)
}

model UserCommunity {
  id               String   @id @default(cuid())
  awardId          String   @unique
  menteeCount      Int      @default(0)
  circleMembers    Int      @default(0)
  learningSessions Int      @default(0)
  helpedUsers      Int      @default(0)

  award            Award    @relation(fields: [awardId], references: [id], onDelete: Cascade)

  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// bi-directional relationship
model Friend {
  id        String  @id @default(cuid())
  userId    String
  friendId  String
  status    FriendStatus @default(PENDING) // pending, accepted, rejected
  
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade, name: "user_friends")
  friend    User    @relation(fields: [friendId], references: [id], onDelete: Cascade, name: "friend_friends")

  @@unique([userId, friendId]) // Prevent duplicate friendships
}

enum FriendStatus {
  PENDING
  APPROVED
  REJECTED
}
