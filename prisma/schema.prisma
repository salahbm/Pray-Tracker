// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


//  dotenv -e .env.local -- npx prisma migrate dev --name <name>



generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters","reactNative"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id          String    @id @default(cuid())
  supabaseId     String    @unique
  email       String    @unique
  password    String    
  username    String    @unique
  firstName   String?
  lastName    String?
  photo       String?   @default("https://dtjijnfmvwmpszagdtdt.supabase.co/storage/v1/object/sign/avatars/guest.png?token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1cmwiOiJhdmF0YXJzL2d1ZXN0LnBuZyIsImlhdCI6MTczODAzNTI4MCwiZXhwIjo0ODYwMDk5MjgwfQ.SIhFeYv30hUehZy949AIpfvCdsneoCmR-WUrYgGABKk")

  totalPoints Int       @default(0)
  premium       Boolean  @default(false)
  premiumExpiry DateTime? // Store the expiration date

  prays       Prays[]
  awards      Award[]
  sentRequests  Friend[] @relation("user_friends")
  receivedRequests Friend[] @relation("friend_friends")

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Prays {
  id        String   @id @default(cuid())
  userId    String
  date      DateTime // Use DateTime instead of String for easier date manipulation
  fajr      Int  @default(0)
  dhuhr     Int  @default(0)
  asr       Int  @default(0)
  maghrib   Int  @default(0)
  isha      Int  @default(0)
  tahajjud  Int  @default(0)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, date]) // Ensure no duplicate date entries for a user
}

model Award {
  id          String   @id @default(cuid())
  userId      String
  title       String   // Award name
  description String?
  image       String? 
  achievedAt  DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, title]) // Ensure the same award is not given multiple times
}

// bi-directional relationship
model Friend {
  id        String  @id @default(cuid())
  userId    String
  friendId  String
  status    String  @default("pending") // pending, accepted, rejected

  user      User    @relation(fields: [userId], references: [id], name: "user_friends")
  friend    User    @relation(fields: [friendId], references: [id], name: "friend_friends")

  @@unique([userId, friendId]) // Prevent duplicate friendships
}

